# frozen_string_literal: true

require 'test/unit'
require './board'

class TestBoardSolving < Test::Unit::TestCase

  def problem_with_data
    [['+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+'],
     ['|', '*', ' ', ' ', '*', '*', ' ', '*', '*', '*', ' ', ' ', '*', '|'],
     ['|', ' ', ' ', '*', '*', '*', ' ', '*', ' ', ' ', '*', ' ', ' ', '|'],
     ['|', ' ', ' ', ' ', ' ', '*', '*', '*', ' ', '*', '*', ' ', ' ', '|'],
     ['|', ' ', ' ', '*', ' ', ' ', '*', '*', ' ', ' ', ' ', ' ', '*', '|'],
     ['+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+']]
  end

  def solution_with_data
    [['+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+'],
     ['|', '*', '2', '3', '*', '*', '4', '*', '*', '*', '2', '2', '*', '|'],
     ['|', '1', '2', '*', '*', '*', '7', '*', '6', '5', '*', '3', '1', '|'],
     ['|', '0', '2', '3', '5', '*', '*', '*', '4', '*', '*', '3', '1', '|'],
     ['|', '0', '1', '*', '2', '3', '*', '*', '3', '2', '2', '2', '*', '|'],
     ['+', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+']]
  end

  def simple_problem
    [['+', '-', '-', '-', '+'],
     ['|', '*', '*', '*', '|'],
     ['|', '*', ' ', '*', '|'],
     ['|', '*', '*', '*', '|'],
     ['+', '-', '-', '-', '+']]
  end

  def simple_solution
    [['+', '-', '-', '-', '+'],
     ['|', '*', '*', '*', '|'],
     ['|', '*', '8', '*', '|'],
     ['|', '*', '*', '*', '|'],
     ['+', '-', '-', '-', '+']]
  end

  def test_with_data
    board = Board.new(problem_with_data)
    assert_equal(board.solve, solution_with_data)
  end

  def test_simple
    board = Board.new(simple_problem)
    assert_equal(board.solve, simple_solution)
  end

  def test_empty
    board = Board.new([])
    assert_equal(board.solve, [])
  end
end

